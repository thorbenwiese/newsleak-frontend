# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# PAGES                                                                                         #
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
GET         /                                                controllers.Application.index

GET    /getDatasets             controllers.Application.getDatasets()
GET    /changeDataset           controllers.Application.changeDataset(name: String)
GET    /getDocsByLabel          controllers.DocumentController.getDocsByLabel(label: String)
GET    /getLabels           	controllers.DocumentController.getTagLabels()
GET    /addTag           		controllers.DocumentController.addTag(id: Int, label: String)
GET    /removeTag           	controllers.DocumentController.removeTagById(tagId: Int)
GET    /getTagsByDocId          controllers.DocumentController.getTagsByDocId(id: Int)
GET    /getKeywordsById         controllers.DocumentController.getKeywordsById(id: Int, size: Int)
GET    /getDocs           		controllers.DocumentController.getDocs(fullText: List[String], generic: Map[String, List[String]], entities: List[Long], timeRange: String, timeExprRange: String)
GET     /getDocsByIds           controllers.DocumentController.getDocsByIds(ids: List[Long])
GET     /induceSubgraph         controllers.NetworkController.induceSubgraph(fullText: List[String], generic: Map[String, List[String]], entities: List[Long], timeRange: String, timeExprRange: String, nodeFraction: Map[String, String])
GET     /addNode                controllers.NetworkController.addNodes(fullText: List[String], generic: Map[String, List[String]], entities: List[Long], timeRange: String, timeExprRange: String, currentNetwork: List[Long], nodes: List[Long])
GET    /blacklistEntitiesById		controllers.NetworkController.blacklistEntitiesById(ids: List[Long])
GET	   /mergeEntitiesById		controllers.NetworkController.mergeEntitiesById(focalId: Long, duplicates: List[Long])
GET	   /getEdgeKeywords		controllers.NetworkController.getEdgeKeywords(fullText: List[String], generic: Map[String, List[String]], entities: List[Long], timeRange: String, timeExprRange: String, first: Long, second: Long, numberOfTerms: Int)
GET	   /getNeighborCounts		controllers.NetworkController.getNeighborCounts(fullText: List[String], generic: Map[String, List[String]], entities: List[Long], timeRange: String, timeExprRange: String, nodeId: Long)
GET	   /getNeighbors		controllers.NetworkController.getNeighbors(fullText: List[String], generic: Map[String, List[String]], entities: List[Long], timeRange: String, timeExprRange: String, currentNetwork: List[Long], focalNode: Long)
GET    /changeEntityNameById	controllers.NetworkController.changeEntityNameById(id: Long, newName: String)
GET    /changeEntityTypeById	controllers.NetworkController.changeEntityTypeById(id: Long, newType: String)
GET    /getEntities		controllers.EntityController.getEntitiesByType(fullText: List[String], generic: Map[String, List[String]], entities: List[Long], timeRange: String, timeExprRange: String, size: Int, entityType: String, filter: List[Long])
GET     /getEntityTypes controllers.EntityController.getEntityTypes
GET     /getBlacklisted controllers.EntityController.getBlacklistedEntities
GET     /getMerged controllers.EntityController.getMergedEntities
GET     /undoBlacklisting controllers.EntityController.undoBlacklistingByIds(ids: List[Long])
GET     /undoMerge controllers.EntityController.undoMergeByIds(focalIds: List[Long])
GET     /getEntitiesByDoc controllers.EntityController.getEntitiesByDoc(id: Long)
GET   /getMetadata     controllers.MetadataController.getMetadata(fullText: List[String], generic: Map[String, List[String]], entities: List[Long], timeRange: String, timeExprRange: String)
GET   /getMetadataTypes       controllers.MetadataController.getMetadataTypes
GET    /getSpecificMetadata             controllers.MetadataController.getSpecificMetadata(fullText: List[String], key: String, generic: Map[String, List[String]], entities: List[Long], instances: List[String], timeRange: String, timeExprRange: String)
GET     /getTimeline               controllers.HistogramController.getTimeline(fullText: List[String], generic: Map[String, List[String]], entities: List[Long], timeRange: String, timeExprRange: String, lod: String)
GET     /getTimeExprTimeline        controllers.HistogramController.getTimeExprTimeline(fullText: List[String], generic: Map[String, List[String]], entities: List[Long], timeRange: String, timeExprRange: String, lod: String)
GET      /getTimelineLOD         controllers.HistogramController.getTimelineLOD

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# JS ROUTING AND RESOURCES                                                                      #
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
GET     	  /assets/javascripts/jsroutes.js  		     controllers.Application.jsRoutes()
GET         /vassets/*file          				         controllers.Assets.versioned(path="/public", file: Asset)
GET         /assets/*file                            controllers.Assets.at(path="/public", file)
